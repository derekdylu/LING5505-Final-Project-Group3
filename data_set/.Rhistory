set.seed(1)
N <- 500
G <- rnorm(n = N, mean = 0, sd = 1)
P <- rnorm(n = N, mean = P, sd = 1)
C <- rnorm(n = N, mean = (P+C)/2, sd = 1)
G <- rnorm(n = N, mean = 0, sd = 1)
P <- rnorm(n = N, mean = G, sd = 1)
C <- rnorm(n = N, mean = (G+P)/2, sd = 1)
df1 <- data.frame(
G = G,
P = P,
C = C
)
head(df1)
set.seed(1)
G <- rnorm(n = N, mean = 0, sd = 1)
P <- rnorm(n = N, mean = G, sd = 1)
C <- rnorm(n = N, mean = (G+P)/2, sd = 1)
N =500
G <- rnorm(n = N, mean = 0, sd = 1)
P <- rnorm(n = N, mean = G, sd = 1)
C <- rnorm(n = N, mean = (G+P)/2, sd = 1)
df1 <- data.frame(
G = G,
P = P,
C = C
)
head(df1)
C <- rnorm(n = N, mean = P, sd = 1)
df1 <- data.frame(
G = G,
P = P,
C = C
)
head(df1)
C <- rnorm(n = N, mean = G+P, sd = 1)
df1 <- data.frame(
G = G,
P = P,
C = C
)
head(df1)
N <- 500
G <- rnorm(n = N, mean = 0, sd = 1)
P <- rnorm(n = N, mean = G, sd = 1)
C <- rnorm(n = N, mean = G+P, sd = 1)
df1 <- data.frame(
G = G,
P = P,
C = C
)
head(df1)
set.seed(1)
###### Do not modify the code above #######
# Write your code here
N <- 500
G <- rnorm(n = N, mean = 0, sd = 1)
P <- rnorm(n = N, mean = G, sd = 1)
C <- rnorm(n = N, mean = G+P, sd = 1)
df1 <- data.frame(
G = G,
P = P,
C = C
)
head(df1)
plotPairs(df1)
library(ggplot2)
library(ggplot2)
plotPairs(df1)
intall.package(psych)
intall.package("psych")
install.packages("psych")
library(psych)
library("psych")
plotPairs(df1)
source("functions.R")
source("functions.R")
intall.packages(psych)
install.packages("psych")
source("functions.R")
plotPairs(df1)
?plotPair
?plotPair()
??plotPair
?psych
??psych
N = 500
U = rnorm(n = N, mean = 0, sd = 1)
G <- rnorm(n = N, mean = 0, sd = 1)
P <- rnorm(n = N, mean = 2*G+U, sd = 1)
C <- rnorm(n = N, mean = 0.5*G+2*P+U, sd = 1)
df2 <- data.frame(
G = G,
P = P,
U = U,
C = C
)
head(df2)
set.seed(1)
N = 500
U = rnorm(n = N, mean = 0, sd = 1)
G <- rnorm(n = N, mean = 0, sd = 1)
P <- rnorm(n = N, mean = 2*G+U, sd = 1)
C <- rnorm(n = N, mean = 0.5*G+2*P+U, sd = 1)
df2 <- data.frame(
G = G,
P = P,
U = U,
C = C
)
head(df2)
set.seed(1)
N = 500
G <- rnorm(n = N, mean = 0, sd = 1)
U = rnorm(n = N, mean = 0, sd = 1)
P <- rnorm(n = N, mean = 2*G+U, sd = 1)
C <- rnorm(n = N, mean = 0.5*G+2*P+U, sd = 1)
df2 <- data.frame(
G = G,
P = P,
U = U,
C = C
)
head(df2)
library("psych")
library("psych")
install.packages("psych")
library("psych")
remove.packages("mnormt")
install.packages("mnormt")
install.packages("psych")
library("psych")
library("mnormt")
install.packages("mnormt")
library("psych")
install.packages("psych")
install.packages("psych")
install.packages("psych")
library("psych")
install.packages("psych")
set.seed(1)
N <- 500
G <- rnorm(n = N, mean = 0, sd = 1)
P <- rnorm(n = N, mean = G, sd = 1)
C <- rnorm(n = N, mean = G+P, sd = 1)
df1 <- data.frame(
G = G,
P = P,
C = C
)
head(df1)
pairs.panels(df1, lm = T, smooth = F, ellipses = F, rug = F, hist.col = "#F8766D")
checkNormality <- function(x) {
#### Finish this function (you can use the template below) ####
bins <- ceiling(length(x) / 10)  # 自動依據 x 計算長條數量
nm_seq <- seq(floor(min(x)), ceiling(max(x)), by = 0.01)
den = dnorm(x = nm_seq, mean = mean(x), sd = sd(x))
nm_df = data.frame(nm_seq = nm_seq, den = den)
plt <- ggplot() +
geom_histogram(mapping = aes(x = x, y = ..density..), bins = bins) + # 實際資料之直方圖
geom_point(data = nm_df, mapping = aes(x = nm_seq, y = den), size = 0.1) # 常態分配曲線
return(plt)
}
set.seed(1914)
d <- rnorm(200)
checkNormality(d)
d <- rnorm(1000)
checkNormality(d)
d <- runif(1000)
checkNormality(d)
checkNormality <- function(x) {
#### Finish this function (you can use the template below) ####
bins <- ceiling(length(x) / 10)  # 自動依據 x 計算長條數量
nm_seq <- seq(floor(min(x)), ceiling(max(x)), by = 0.01)
den = dnorm(x = nm_seq, mean = mean(x), sd = sd(x))
nm_df = data.frame(nm_seq = nm_seq, den = den)
plt <- ggplot() +
geom_histogram(mapping = aes(x = x, y = ..density..), bins = bins, w = 5) + # 實際資料之直方圖
geom_point(data = nm_df, mapping = aes(x = nm_seq, y = den), size = 0.1) # 常態分配曲線
return(plt)
}
set.seed(1914)
d <- rnorm(200)
checkNormality(d)
d <- rnorm(1000)
checkNormality(d)
d <- runif(1000)
checkNormality(d)
checkNormality <- function(x) {
#### Finish this function (you can use the template below) ####
bins <- ceiling(length(x) / 10)  # 自動依據 x 計算長條數量
nm_seq <- seq(floor(min(x)), ceiling(max(x)), by = 0.01)
den = dnorm(x = nm_seq, mean = mean(x), sd = sd(x))
nm_df = data.frame(nm_seq = nm_seq, den = den)
plt <- ggplot() +
geom_histogram(mapping = aes(x = x, y = ..density..), bins = bins) + # 實際資料之直方圖
geom_point(data = nm_df, mapping = aes(x = nm_seq, y = den), size = 0.1) # 常態分配曲線
return(plt)
}
set.seed(1914)
d <- rnorm(200)
checkNormality(d)
d <- rnorm(1000)
checkNormality(d)
d <- runif(1000)
checkNormality(d)
checkNormality <- function(x) {
#### Finish this function (you can use the template below) ####
bins <- ceiling(length(x) / 10)  # 自動依據 x 計算長條數量
nm_seq <- seq(floor(min(x)), ceiling(max(x)), by = 0.01)
den = dnorm(x = nm_seq, mean = mean(x), sd = sd(x))
nm_df = data.frame(nm_seq = nm_seq, den = den)
plt <- ggplot() +
geom_histogram(mapping = aes(x = x, y = ..density..), bins = bins, border = 'red') + # 實際資料之直方圖
geom_point(data = nm_df, mapping = aes(x = nm_seq, y = den), size = 0.1) # 常態分配曲線
return(plt)
}
set.seed(1914)
d <- rnorm(200)
checkNormality(d)
d <- rnorm(1000)
checkNormality(d)
d <- runif(1000)
checkNormality(d)
?geom_histogram
checkNormality <- function(x) {
#### Finish this function (you can use the template below) ####
bins <- ceiling(length(x) / 10)  # 自動依據 x 計算長條數量
nm_seq <- seq(floor(min(x)), ceiling(max(x)), by = 0.01)
den = dnorm(x = nm_seq, mean = mean(x), sd = sd(x))
nm_df = data.frame(nm_seq = nm_seq, den = den)
plt <- ggplot() +
geom_histogram(mapping = aes(x = x, y = ..density..), bins = bins, border = 'red', binwidth = 10) + # 實際資料之直方圖
geom_point(data = nm_df, mapping = aes(x = nm_seq, y = den), size = 0.1) # 常態分配曲線
return(plt)
}
set.seed(1914)
d <- rnorm(200)
checkNormality(d)
d <- rnorm(1000)
checkNormality(d)
d <- runif(1000)
checkNormality(d)
checkNormality <- function(x) {
#### Finish this function (you can use the template below) ####
bins <- ceiling(length(x) / 10)  # 自動依據 x 計算長條數量
nm_seq <- seq(floor(min(x)), ceiling(max(x)), by = 0.01)
den = dnorm(x = nm_seq, mean = mean(x), sd = sd(x))
nm_df = data.frame(nm_seq = nm_seq, den = den)
plt <- ggplot() +
geom_histogram(mapping = aes(x = x, y = ..density..), bins = bins, border = 'red', binwidth = 0.01) + # 實際資料之直方圖
geom_point(data = nm_df, mapping = aes(x = nm_seq, y = den), size = 0.1) # 常態分配曲線
return(plt)
}
set.seed(1914)
d <- rnorm(200)
checkNormality(d)
d <- rnorm(1000)
checkNormality(d)
d <- runif(1000)
checkNormality(d)
checkNormality <- function(x) {
#### Finish this function (you can use the template below) ####
bins <- ceiling(length(x) / 10)  # 自動依據 x 計算長條數量
nm_seq <- seq(floor(min(x)), ceiling(max(x)), by = 0.01)
den = dnorm(x = nm_seq, mean = mean(x), sd = sd(x))
nm_df = data.frame(nm_seq = nm_seq, den = den)
plt <- ggplot() +
geom_histogram(mapping = aes(x = x, y = ..density..), bins = bins, border = 'red', breaks = 0.01) + # 實際資料之直方圖
geom_point(data = nm_df, mapping = aes(x = nm_seq, y = den), size = 0.1) # 常態分配曲線
return(plt)
}
set.seed(1914)
d <- rnorm(200)
checkNormality(d)
d <- rnorm(1000)
checkNormality(d)
d <- runif(1000)
checkNormality(d)
checkNormality <- function(x) {
#### Finish this function (you can use the template below) ####
bins <- ceiling(length(x) / 10)  # 自動依據 x 計算長條數量
nm_seq <- seq(floor(min(x)), ceiling(max(x)), by = 0.01)
den = dnorm(x = nm_seq, mean = mean(x), sd = sd(x))
nm_df = data.frame(nm_seq = nm_seq, den = den)
plt <- ggplot() +
geom_histogram(mapping = aes(x = x, y = ..density..), bins = bins, border = 'red', breaks = 1) + # 實際資料之直方圖
geom_point(data = nm_df, mapping = aes(x = nm_seq, y = den), size = 0.1) # 常態分配曲線
return(plt)
}
set.seed(1914)
d <- rnorm(200)
checkNormality(d)
d <- rnorm(1000)
checkNormality(d)
d <- runif(1000)
checkNormality(d)
checkNormality <- function(x) {
#### Finish this function (you can use the template below) ####
bins <- ceiling(length(x) / 10)  # 自動依據 x 計算長條數量
nm_seq <- seq(floor(min(x)), ceiling(max(x)), by = 0.01)
den = dnorm(x = nm_seq, mean = mean(x), sd = sd(x))
nm_df = data.frame(nm_seq = nm_seq, den = den)
plt <- ggplot() +
geom_histogram(mapping = aes(x = x, y = ..density..), bins = bins, border = 'red') + # 實際資料之直方圖
geom_point(data = nm_df, mapping = aes(x = nm_seq, y = den), size = 0.1) # 常態分配曲線
return(plt)
}
set.seed(1914)
d <- rnorm(200)
checkNormality(d)
d <- rnorm(1000)
checkNormality(d)
d <- runif(1000)
checkNormality(d)
checkNormality <- function(x) {
#### Finish this function (you can use the template below) ####
bins <- ceiling(length(x) / 10)  # 自動依據 x 計算長條數量
nm_seq <- seq(floor(min(x)), ceiling(max(x)), by = 0.01)
den = dnorm(x = nm_seq, mean = mean(x), sd = sd(x))
nm_df = data.frame(nm_seq = nm_seq, den = den)
plt <- ggplot() +
geom_histogram(mapping = aes(x = x, y = ..density..), bins = bins) + # 實際資料之直方圖
geom_point(data = nm_df, mapping = aes(x = nm_seq, y = den), size = 0.1) # 常態分配曲線
return(plt)
}
checkNormality <- function(x) {
#### Finish this function (you can use the template below) ####
bins <- ceiling(length(x) / 10)  # 自動依據 x 計算長條數量
nm_seq <- seq(floor(min(x)), ceiling(max(x)), by = 0.01)
den = dnorm(x = nm_seq, mean = mean(x), sd = sd(x))
nm_df = data.frame(nm_seq = nm_seq, den = den)
plt <- ggplot() +
geom_histogram(mapping = aes(x = x, y = ..density..), bins = bins, breaks = 1) + # 實際資料之直方圖
geom_point(data = nm_df, mapping = aes(x = nm_seq, y = den), size = 0.1) # 常態分配曲線
return(plt)
}
set.seed(1914)
d <- rnorm(200)
checkNormality(d)
d <- rnorm(1000)
checkNormality(d)
d <- runif(1000)
checkNormality(d)
checkNormality <- function(x) {
#### Finish this function (you can use the template below) ####
bins <- ceiling(length(x) / 10)  # 自動依據 x 計算長條數量
nm_seq <- seq(floor(min(x)), ceiling(max(x)), by = 0.01)
den = dnorm(x = nm_seq, mean = mean(x), sd = sd(x))
nm_df = data.frame(nm_seq = nm_seq, den = den)
plt <- ggplot() +
geom_histogram(mapping = aes(x = x, y = ..density..), bins = bins) + # 實際資料之直方圖
geom_point(data = nm_df, mapping = aes(x = nm_seq, y = den), size = 0.1) # 常態分配曲線
return(plt)
}
set.seed(1914)
d <- rnorm(200)
checkNormality(d)
d <- rnorm(1000)
checkNormality(d)
d <- runif(1000)
checkNormality(d)
ㄜ
a
library(httr)
library(magrittr)
resp <- GET('https://api.ratesapi.io/',
path = 'api/latest',
query = list(base = "USD", symbols = "JPY"))
resp <- GET('https://api.ratesapi.io/', path = 'api/latest', query = list(base = "USD", symbols = "JPY"))
set_config(use_proxy(url="10.3.100.207",port=8080))
resp <- GET('https://api.ratesapi.io/', path = 'api/latest', query = list(base = "USD", symbols = "JPY"))
set_config(use_proxy(url="https://api.ratesapi.io/",port=8080))
resp <- GET('https://api.ratesapi.io/', path = 'api/latest', query = list(base = "USD", symbols = "JPY"))
?set_config
reset_config()
resp <- GET('https://api.ratesapi.io/', path = 'api/latest', query = list(base = "USD", symbols = "JPY"))
?GET
GET("http://google.com/")
GET("https://api.ratesapi.io/api/latest?base=USD&symbols=JPY")
setwd("~/Documents/NTU/2_Sophomore/2-2/R/Project/data_set")
file_names = list.files()
file_names
file_names[1]
doc1 = readLines(file[1])
doc1 = readLines(file_names[1])
doc1 = readLines(file_names[1])
setwd("~/Documents/NTU/2_Sophomore/2-2/R/Project/data_set")
doc1 = readLines(file_names[1])
doc1 = readLines(file_names[1])
doc1 = readLines(file_names[1])
doc1 = readLines(file_names[1])
doc1 = readLines(file_names[2])
doc1 = readLines(file_names[1])
doc1
library(jiebaR)
library(tidytext)
library(dplyr)
library(ggplot2)
seg = worker(bylines = T)
segged = segment(doc1, seg)
segged
segged[[1]]
sapply(segged[[1]], function(x) paste(x, collapse = "\u3000"))
seg = worker()
segged = segment(doc1, seg)
segged
sapply(segged, function(x) paste(x, collapse = "\u3000"))
segged_new = sapply(segged, function(x) paste(x, collapse = "\u3000"))
segged_new
df = data.frame(segged)new
df = data.frame(segged_new)
df
td_df = df %>% unnest_tokens(output = "words", input = "segged_new", token = "regex", pattern = "\u3000")
td_df
fq = td_df %>% group_by(words) %>% summarise(n = n()) %>% arrange(desc(n))
df
fq
View(fq)
install.packages('devtools')
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages('devtools')
install.packages("devtools")
devtools::install_github('lchiffn/wordcloud2')
library(devtools)
library(devtools)
library('devtools')
fq
doc1
doc1 = readLines(file_names[1], warn = false)
doc1 = readLines(file_names[1], warn = False)
?readLines
doc1 = readLines(file_names[1], warn = FALSE)
seq_along(file_names)
doc2 = readLines(file_names[2], warn = FALSE)
doc2
doc1
segged
segged2 = segment(seg, doc2)
segged2 = segment(doc2, doc2)
segged2 = segment(doc2, seg)
library(jiebaR)
segged2 = segment(doc2, seg)
seg = worker
seg = worker()
segged2 = segment(doc2, seg)
segged2
segged
type(segged)
class(segged)
all = c(segged, segged2)
all
all_ = ""
all_ = c(all_, segged2)
all_
freq_df = tidy_df %>% group_by(words) %>% summarise(n = n()) %>% arrange(desc(n))
freq_df = tidy_df %>% group_by(words) %>% summarise(n = n()) %>% arrange(desc(n))
source('~/Documents/NTU/2_Sophomore/2-2/R/Project/derek.r')
source('~/Documents/NTU/2_Sophomore/2-2/R/Project/derek.r')
View(freq_df)
install.packages("wordcloud")
library(wordcloud)
par(family=("Heiti TC Light"))
wordcloud(
words = freq_df[,1],
freq =  freq_df[,2],
scale = c(2,.1),
random.order = FALSE,
ordered.colors = FALSE,
rot.per = FALSE,
min.freq = 7,
colors = brewer.pal(8, "Dark2")
)
par(family=("Heiti TC Light"))
par(family=("Heiti TC Light"))
wordcloud(
+     words = freq_df$words,
+     freq =  freq_df$n,
+     scale = c(2,.1),
+     random.order = FALSE,
+     ordered.colors = FALSE,
+     rot.per = FALSE,
+     min.freq = 7,
+     colors = brewer.pal(8, "Dark2")
+ )
wordcloud(words = freq_df$words, freq =  freq_df$n, scale = c(2,.1), random.order = FALSE, ordered.colors = FALSE, rot.per = FALSE, min.freq = 7, colors = brewer.pal(8, "Dark2"))
wordcloud(words = freq_df$words, freq =  freq_df$n, scale = c(2,.1), random.order = FALSE, ordered.colors = FALSE, rot.per = FALSE, min.freq = 100, colors = brewer.pal(8, "Dark2"))
freq_df_ = freq_df[3:,]
freq_df_ = freq_df[3,]
freq_df_
freq_df_ = freq_df[3:14080,]
wordcloud(words = freq_df_$words, freq =  freq_df_$n, scale = c(2,.1), random.order = FALSE, ordered.colors = FALSE, rot.per = FALSE, min.freq = 100, colors = brewer.pal(8, "Dark2"))
wordcloud(words = freq_df_$words, freq =  freq_df_$n, scale = c(5,.1), random.order = FALSE, ordered.colors = FALSE, rot.per = FALSE, min.freq = 100, colors = brewer.pal(8, "Dark2"))
wordcloud(words = freq_df_$words, freq =  freq_df_$n, scale = c(5,.01), random.order = FALSE, ordered.colors = FALSE, rot.per = FALSE, min.freq = 100, colors = brewer.pal(8, "Dark2"))
wordcloud(words = freq_df_$words, freq =  freq_df_$n, scale = c(2,.01), random.order = FALSE, ordered.colors = FALSE, rot.per = FALSE, min.freq = 100, colors = brewer.pal(8, "Dark2"))
wordcloud(words = freq_df_$words, freq =  freq_df_$n, scale = c(10,.01), random.order = FALSE, ordered.colors = FALSE, rot.per = FALSE, min.freq = 100, colors = brewer.pal(8, "Dark2"))
wordcloud(words = freq_df_$words, freq =  freq_df_$n, scale = c(3,.01), random.order = FALSE, ordered.colors = FALSE, rot.per = FALSE, min.freq = 100, colors = brewer.pal(8, "Dark2"))
install.packages("wordcloud2")
library(wordcloud2)
wordcloud2(frequency(),shape = 'triangle',backgroundColor='yellow',size = 0.2)
wordcloud2(freq_df_, shape = 'triangle',backgroundColor='yellow',size = 0.2)
wordcloud2(freq_df_, shape = 'triangle',backgroundColor='white',size = 0.2)
wordcloud2(freq_df_, shape = 'triangle',backgroundColor='white',size = 1)
wordcloud2(freq_df_,backgroundColor='white',size = 1)
source('~/Documents/NTU/2_Sophomore/2-2/R/Project/derek.r')
wordcloud2(freq_df_,backgroundColor='white',size = 1)
wordcloud2(freq_df_,backgroundColor='white',size = 2)
